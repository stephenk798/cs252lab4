#include <stdio.h>
#include <pthread.h>
#include <errno.h>
#include "recmutex.h"

int recursive_mutex_init (recursive_mutex_t *mu)
{
	int error = 0;
	error = pthread_mutex_init(&mu->mutex, NULL);
	if(error != 0){
		return error;
	}
	error = pthread_cond_init(&mu->cond, NULL);
	mu->owner = 0;
	mu->count = 0;
	mu->wait_count = 0;
	
	return error;
}

int recursive_mutex_destroy (recursive_mutex_t *mu)
{
	int error = 0;
	error = pthread_mutex_destroy(&(mu->mutex));
	if(error != 0){
		return error;
	}
	error = pthread_cond_destroy(&(mu->cond));
	return error;
}
/* The recursive mutex object referenced by mu shall be 
   locked by calling pthread_mutex_lock(). When a thread 
   successfully acquires a mutex for the first time, 
   the lock count shall be set to one and successfully return. 
   Every time a thread relocks this mutex, the lock count 
   shall be incremented by one and return success immediately. 
   And any other calling thread can only wait on the conditional 
   variable until being waked up. Return a non-zero integer if errors occur. 
*/
int recursive_mutex_lock (recursive_mutex_t *mu)
{	int error = 0;
	error = pthread_mutex_lock(&(mu->mutex));
	if(mu->owner == 0){
		mu->owner = pthread_self();
		mu->count = 1;
		pthread_mutex_unlock(&(mu->mutex));
		return error;
	}
	else if(mu->owner == pthread_self()){
		mu->count++;
		pthread_mutex_unlock(&(mu->mutex));
		return error;
	}
	else{
		pthread_cond_wait(&(mu->cond), &(mu->mutex));
		pthread_mutex_unlock(&(mu->mutex));
		return error;
	}
}
/* The recursive_mutex_unlock() function shall release the 
  recursive mutex object referenced by mu. Each time the owner 
  thread unlocks the mutex, the lock count shall be decremented by one. 
  When the lock count reaches zero, the mutex shall become available 
  for other threads to acquire. If a thread attempts to unlock a 
  mutex that it has not locked or a mutex which is unlocked, 
  an error shall be returned. Return a non-zero integer if errors occur. 
*/
int recursive_mutex_unlock (recursive_mutex_t *mu)
{
	int error = 0;
	if(mu->owner == pthread_self()){
		mu->count--;
		if(mu->count == 0){
			mu->owner = 0;
			pthread_cond_signal(&(mu->cond));
			//return error;
		}
	}
	else{
		error = 0;
	}
	return error;
}
